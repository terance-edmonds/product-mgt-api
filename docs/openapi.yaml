openapi: 3.0.3
info:
  title: Product Management API
  description: A RESTful API for managing products and inventory, built with Go and Fiber.
  version: 1.0.0
  contact:
    name: WSO2 LLC
    url: https://www.wso2.com/
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0

servers:
  - url: http://localhost:8080/api/v1
    description: Local development server

paths:
  /products:
    get:
      summary: List all products
      description: Retrieves a list of all products in the system.
      responses:
        '200':
          description: Successful response with a list of products
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductsResponse'
              example:
                status: success
                data:
                  - id: "12345"
                    name: "Wireless Mouse"
                    description: "A comfortable wireless mouse with ergonomic design."
                    price: 25.99
                    category: "Electronics"
                    stock_quantity: 150
                    created_at: "2025-01-15T10:00:00Z"
                    updated_at: "2025-03-01T08:00:00Z"
                  - id: "67890"
                    name: "Bluetooth Speaker"
                    description: "Portable Bluetooth speaker with high-quality sound."
                    price: 49.99
                    category: "Electronics"
                    stock_quantity: 85
                    created_at: "2025-02-05T12:00:00Z"
                    updated_at: "2025-03-01T08:30:00Z"
    post:
      summary: Create a new product
      description: Adds a new product to the system. If no ID is provided, one is generated.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
            example:
              name: "Noise Cancelling Headphones"
              description: "Over-ear headphones with active noise cancellation."
              price: 120.00
              category: "Electronics"
              stock_quantity: 75
      responses:
        '200':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
              example:
                status: success
                message: "Product created successfully"
                data:
                  id: "550e8400-e29b-41d4-a716-446655440000"
                  name: "Noise Cancelling Headphones"
                  description: "Over-ear headphones with active noise cancellation."
                  price: 120.00
                  category: "Electronics"
                  stock_quantity: 75
                  created_at: "2025-03-14T10:00:00Z"
                  updated_at: "2025-03-14T10:00:00Z"
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Cannot parse JSON"

  /products/{productId}:
    get:
      summary: Get a product by ID
      description: Retrieves details of a specific product by its ID.
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier of the product
      responses:
        '200':
          description: Product found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
              example:
                status: success
                data:
                  id: "12345"
                  name: "Wireless Mouse"
                  description: "A comfortable wireless mouse with ergonomic design."
                  price: 25.99
                  category: "Electronics"
                  stock_quantity: 150
                  created_at: "2025-01-15T10:00:00Z"
                  updated_at: "2025-03-01T08:00:00Z"
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Product not found"
    put:
      summary: Update a product
      description: Updates an existing product by its ID.
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier of the product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
            example:
              name: "Wireless Mouse Pro"
              description: "A professional version of the wireless mouse with additional features."
              price: 29.99
              category: "Electronics"
              stock_quantity: 120
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
              example:
                status: success
                message: "Product updated successfully"
                data:
                  id: "12345"
                  name: "Wireless Mouse Pro"
                  description: "A professional version of the wireless mouse with additional features."
                  price: 29.99
                  category: "Electronics"
                  stock_quantity: 120
                  created_at: "2025-01-15T10:00:00Z"
                  updated_at: "2025-03-14T10:00:00Z"
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Cannot parse JSON"
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Product not found"
    delete:
      summary: Delete a product
      description: Removes a product from the system by its ID.
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier of the product
      responses:
        '200':
          description: Product deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                status: success
                message: "Product deleted successfully"
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Product not found"

  /inventory/adjustment:
    post:
      summary: Adjust inventory quantity
      description: Adjusts the stock quantity of a product.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventoryAdjustmentRequest'
            example:
              product_id: "12345"
              quantity_adjusted: -10
              reason: "Inventory correction"
      responses:
        '200':
          description: Inventory adjusted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryAdjustmentResponse'
              example:
                status: success
                message: "Inventory adjusted successfully"
                data:
                  product_id: "12345"
                  quantity_adjusted: -10
                  new_stock_quantity: 140
                  reason: "Inventory correction"
                  adjustment_date: "2025-03-14T10:00:00Z"
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Cannot parse JSON"
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Product not found"

components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the product (generated if not provided)
        name:
          type: string
          description: Name of the product
        description:
          type: string
          description: Description of the product
        price:
          type: number
          format: float
          description: Price of the product
        category:
          type: string
          description: Category of the product
        stock_quantity:
          type: integer
          description: Current stock quantity
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
      required:
        - name
        - price
        - stock_quantity

    ProductRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        category:
          type: string
        stock_quantity:
          type: integer
      required:
        - name
        - price
        - stock_quantity

    Response:
      type: object
      properties:
        status:
          type: string
          description: Status of the response (e.g., "success")
        message:
          type: string
          description: Optional message
        data:
          type: object
          description: Optional data payload
      required:
        - status

    ProductResponse:
      allOf:
        - $ref: '#/components/schemas/Response'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Product'

    ProductsResponse:
      allOf:
        - $ref: '#/components/schemas/Response'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Product'

    InventoryAdjustmentRequest:
      type: object
      properties:
        product_id:
          type: string
          description: ID of the product to adjust
        quantity_adjusted:
          type: integer
          description: Amount to adjust the stock (positive or negative)
        reason:
          type: string
          description: Reason for the adjustment
      required:
        - product_id
        - quantity_adjusted

    InventoryAdjustmentResponse:
      allOf:
        - $ref: '#/components/schemas/Response'
        - type: object
          properties:
            data:
              type: object
              properties:
                product_id:
                  type: string
                quantity_adjusted:
                  type: integer
                new_stock_quantity:
                  type: integer
                  description: Updated stock quantity after adjustment
                reason:
                  type: string
                adjustment_date:
                  type: string
                  format: date-time
                  description: Timestamp of the adjustment

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message
      required:
        - error